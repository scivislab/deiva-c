#------------------------------------------------------------------------------#
# Copyright (c) 2014 Los Alamos National Security, LLC
# All rights reserved.
#------------------------------------------------------------------------------#

################################################################################
# Please Do Not Edit This File Unless You Know What You Are Doing!!!
#
# Project-specific configuration rules should be added in the 'config'
# subdirectory of the top-level of this project in the appropriate file,
# e.g., package configuration options should go in 'config/packages.cmake'.
#
# For more documentation on the design philosophy of this build system
# and the recognized configuration files that can be added to the 'config'
# subdirectory, please look in 'cinch/README.md' and 'cinch/INSTALL.md'
# from the top-level of this project.
#
# Any changes to the basic build template should be discussed with the
# project maintainers.
################################################################################

#------------------------------------------------------------------------------#
# Require some version of cmake
#------------------------------------------------------------------------------#

# We are using target_include_directories, which is a cmake-3.0 feature
set(CINCH_REQUIRED_CMAKE_VERSION 3.0)

if(CMAKE_VERSION VERSION_LESS CINCH_REQUIRED_CMAKE_VERSION)
    message(FATAL_ERROR
        "Cinch needs at least cmake ${CINCH_REQUIRED_CMAKE_VERSION}")
endif()

#------------------------------------------------------------------------------#
# Add path for cinch modules
#------------------------------------------------------------------------------#

list(APPEND CMAKE_MODULE_PATH ${CINCH_SOURCE_DIR}/cmake)

#------------------------------------------------------------------------------#
# Cinch includes
#------------------------------------------------------------------------------#

include(info)
include(cinch_minimum_required)
include(colors)
include(common)
include(conformance-init)
include(conformance)
include(include_links)
include(insource)
include(subdirlist)
include(unit)
include(test-execution-policy)
include(documentation)
include(library)
include(application)
include(subproject)
include(doxygen)
include(openmp)
include(version)

#------------------------------------------------------------------------------#
# Set to release if no build type has been specified
#------------------------------------------------------------------------------#

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug CACHE STRING
        "CMake build type <Debug|Release|RelWithDebInfo|MinSizeRel>" FORCE)
endif(NOT CMAKE_BUILD_TYPE)

if("${CMAKE_BUILD_TYPE}" STREQUAL "Debug" OR
    "${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
    add_definitions(-DDEBUG)
endif("${CMAKE_BUILD_TYPE}" STREQUAL "Debug" OR
    "${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")

#------------------------------------------------------------------------------#
# Print useful information
#------------------------------------------------------------------------------#

if(CMAKE_INSTALL_PREFIX)
    message(STATUS "Install prefix set to ${CMAKE_INSTALL_PREFIX}")
endif(CMAKE_INSTALL_PREFIX)

if(CMAKE_CXX_FLAGS)
    message(STATUS "C++ compiler flags set to ${CMAKE_CXX_FLAGS}")
endif(CMAKE_CXX_FLAGS)

if(CMAKE_C_FLAGS)
    message(STATUS "C compiler flags set to ${CMAKE_C_FLAGS}")
endif(CMAKE_C_FLAGS)

if(CMAKE_FORTRAN_FLAGS)
    message(STATUS "Fortran compiler flags set to ${CMAKE_FORTRAN_FLAGS}")
endif(CMAKE_FORTRAN_FLAGS)

#------------------------------------------------------------------------------#
# Initialize these to avoid capture of parent state
#------------------------------------------------------------------------------#

unset(CINCH_TOP_LEVEL_PROJECT)
unset(CINCH_APPLICATION_DIRECTORIES)
unset(CINCH_LIBRARY_TARGETS)
unset(CINCH_SUBPROJECTS)
unset(CINCH_UNIT_EXECUTION_POLICIES)

# This is a cache variable, i.e., global.  DO NOT REMOVE THE CACHE ARGUMENT
unset(CINCH_UNIT_TEST_TARGETS CACHE)

#------------------------------------------------------------------------------#
# Set top-level flag
#------------------------------------------------------------------------------#

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
    set(CINCH_TOP_LEVEL_PROJECT True)
endif(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})

#------------------------------------------------------------------------------#
# Include project configuration
#------------------------------------------------------------------------------#

include(${CMAKE_CURRENT_SOURCE_DIR}/config/project.cmake)

#------------------------------------------------------------------------------#
# Post-project includes
#------------------------------------------------------------------------------#

include(mpi)

#------------------------------------------------------------------------------#
# Create a version for the project
#------------------------------------------------------------------------------#

set(VERSION_CREATION "git describe" CACHE STRING "Set a static version")

if(NOT "${VERSION_CREATION}" STREQUAL "git describe")
    set(${PROJECT_NAME}_VERSION ${VERSION_CREATION})
else()
    cinch_make_version()
endif(NOT "${VERSION_CREATION}" STREQUAL "git describe")

message(STATUS "Creating build for version "
    "${PROJECT_NAME}-${${PROJECT_NAME}_VERSION}")

#------------------------------------------------------------------------------#
# Keep users from creating insource builds.
#------------------------------------------------------------------------------#

cinch_prevent_insource_builds()

#------------------------------------------------------------------------------#
# Include package requirements
#------------------------------------------------------------------------------#

include(${CMAKE_CURRENT_SOURCE_DIR}/config/packages.cmake)

#------------------------------------------------------------------------------#
# Include project documentation
#------------------------------------------------------------------------------#

if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/config/documentation.cmake)
    include(${CMAKE_CURRENT_SOURCE_DIR}/config/documentation.cmake)
endif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/config/documentation.cmake)

#------------------------------------------------------------------------------#
# Add top-level targets
#------------------------------------------------------------------------------#

if(${CINCH_TOP_LEVEL_PROJECT})

    #--------------------------------------------------------------------------#
    # This is a top-level build
    #--------------------------------------------------------------------------#

    add_custom_target(distclean rm -rf ${CMAKE_BINARY_DIR}/*)
    set(CINCH_CONFIG_INFOTAG)

    #--------------------------------------------------------------------------#
    # Remove include links
    #--------------------------------------------------------------------------#

    if(EXISTS ${CMAKE_BINARY_DIR}/include)
        file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/include)
    endif(EXISTS ${CMAKE_BINARY_DIR}/include)

    #--------------------------------------------------------------------------#
    # Global options 
    #--------------------------------------------------------------------------#

    option(ENABLE_COVERAGE_BUILD "Do a coverage build" OFF)
    if(ENABLE_COVERAGE_BUILD)
        message(STATUS "Enabling coverage build")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --coverage -O0")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --coverage -O0")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --coverage")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} --coverage")
    endif()
    option(BUILD_SHARED_LIBS "Build shared libs" ON)
    if (NOT DEFINED LIBDIR)
        include(GNUInstallDirs)
        set(LIBDIR "${CMAKE_INSTALL_LIBDIR}")
    endif(NOT DEFINED LIBDIR)

    #--------------------------------------------------------------------------#
    # Add support for Boost preprocessor.
    #--------------------------------------------------------------------------#

    option(ENABLE_BOOST_PREPROCESSOR "Enable Boost.Preprocessor subset" OFF)

    if(ENABLE_BOOST_PREPROCESSOR)
        include_directories(${CINCH_SOURCE_DIR}/boost/preprocessor/include)
    endif()

    #--------------------------------------------------------------------------#
    # Add support for GFlags
    #--------------------------------------------------------------------------#

    option(ENABLE_GFLAGS "Enable command-line flag support" OFF)

    if(ENABLE_GFLAGS)
        find_package(GFlags)

        if(GFlags_FOUND)
            # We found a system or local installation
            include_directories(${GFlags_INCLUDE_DIRS})
        else()
            # Build it ourselves
            add_subdirectory(${CINCH_SOURCE_DIR}/gflags
                ${CMAKE_BINARY_DIR}/cinch/gflags)
            include_directories(${CMAKE_BINARY_DIR}/cinch/gflags/include)
            set(GFLAGS_LIBRARIES gflags)
        endif()

        # Add this to the compile definitions
        add_definitions(-DENABLE_GFLAGS)
    endif()

    #--------------------------------------------------------------------------#
    # Add clog logging
    #--------------------------------------------------------------------------#

    include_directories(${CINCH_SOURCE_DIR}/logging)

    # Add an option to set the strip level
    set(CLOG_STRIP_LEVEL "0" CACHE STRING "Set the clog strip level")
    add_definitions(-DCLOG_STRIP_LEVEL=${CLOG_STRIP_LEVEL})

    # Allow color output
    option(CLOG_COLOR_OUTPUT "Enable colorized clog logging" ON)
    if(CLOG_COLOR_OUTPUT)
        add_definitions(-DCLOG_COLOR_OUTPUT)
    endif()

    # Enable tag groups
    option(CLOG_ENABLE_TAGS "Enable tag groups" OFF)
    if(CLOG_ENABLE_TAGS)
        set(CLOG_TAG_BITS "16" CACHE STRING
            "Select the number of bits to use for tag groups.")
        add_definitions(-DCLOG_ENABLE_TAGS)
        add_definitions(-DCLOG_TAG_BITS=${CLOG_TAG_BITS})
    endif()

    # MPI
    if(MPI_${MPI_LANGUAGE}_FOUND)
        option(CLOG_ENABLE_MPI "Enable clog MPI functions" OFF)
        if(CLOG_ENABLE_MPI)
            add_definitions(-DCLOG_ENABLE_MPI)
        endif()
    endif()

    #--------------------------------------------------------------------------#
    # Add support for ctest, GTest, and pFUnit
    #--------------------------------------------------------------------------#

    option(ENABLE_UNIT_TESTS "Enable unit testing" OFF)
    option(ENABLE_COLOR_UNIT_TESTS "Enable colorized unit testing output" OFF)
    option(ENABLE_JENKINS_OUTPUT
        "Generate jenkins xml output for every test" OFF)

    if(ENABLE_UNIT_TESTS)

        enable_testing()

        #----------------------------------------------------------------------#
        # Google Test
        #----------------------------------------------------------------------#

        find_package(GTest QUIET)

        if(GTEST_FOUND)
          include_directories(${GTEST_INCLUDE_DIRS})
        else()
          find_package(Threads)
          add_library(gtest
            ${CINCH_SOURCE_DIR}/gtest/googletest/src/gtest-all.cc)
          target_include_directories(gtest PRIVATE
            ${CINCH_SOURCE_DIR}/gtest/googletest)
          target_link_libraries(gtest ${CMAKE_THREAD_LIBS_INIT})
          include_directories(${CINCH_SOURCE_DIR}/gtest/googlemock/include)
          include_directories(${CINCH_SOURCE_DIR}/gtest/googletest)
          include_directories(${CINCH_SOURCE_DIR}/gtest/googletest/include)
          set(GTEST_LIBRARIES gtest)
        endif()

        include_directories(${CINCH_SOURCE_DIR}/auxiliary)

        #----------------------------------------------------------------------#
        # pFUnit
        #----------------------------------------------------------------------#

        get_property(LANGUAGES GLOBAL PROPERTY ENABLED_LANGUAGES)

        list(FIND LANGUAGES "Fortran" FORTRAN_ENABLED)

        if(FORTRAN_ENABLED EQUAL -1)
            set(FORTRAN_ENABLED FALSE)
        endif(FORTRAN_ENABLED EQUAL -1)

        if(FORTRAN_ENABLED)
            find_package(PythonInterp QUIET)
            find_package(pFUnit QUIET)

            if(PFUNIT_FOUND)
                include_directories(${PFUNIT_INCLUDE_DIR})
            else()
                include(${CINCH_SOURCE_DIR}/cmake/PFUnitLists.txt)
            endif()
        endif()

        #----------------------------------------------------------------------#
        # Add default execution polices
        #----------------------------------------------------------------------#

        cinch_add_test_execution_policy(SERIAL
            ${CINCH_SOURCE_DIR}/auxiliary/test-standard.cc
        )

        cinch_add_test_execution_policy(SERIAL_DEVEL
            ${CINCH_SOURCE_DIR}/auxiliary/test-standard.cc
            DEFINES "-DCINCH_DEVEL_TEST"
        )

        if(FORTRAN_ENABLED)
            cinch_add_test_execution_policy(FORTRAN
                ${PFUNIT_DRIVER}
                LIBRARIES ${PFUNIT_LIBRARY})
        endif(FORTRAN_ENABLED)

        # Need to collect extra runtime libraries into a standard variable
        # that users can add to their unit test defines if needed.
        set(CINCH_RUNTIME_INCLUDES)
        set(CINCH_RUNTIME_FLAGS)
        set(CINCH_RUNTIME_LIBRARIES)

        # MPI Runtime
        if(MPI_${MPI_LANGUAGE}_FOUND)
            cinch_add_test_execution_policy(MPI
                ${CINCH_SOURCE_DIR}/auxiliary/test-mpi.cc
                FLAGS ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
                INCLUDES ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
                LIBRARIES ${MPI_${MPI_LANGUAGE}_LIBRARIES}
                EXEC ${MPIEXEC}
                EXEC_THREADS ${MPIEXEC_NUMPROC_FLAG}
            )

            cinch_add_test_execution_policy(MPI_DEVEL
                ${CINCH_SOURCE_DIR}/auxiliary/test-mpi.cc
                FLAGS ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
                INCLUDES ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
                DEFINES "-DCINCH_DEVEL_TEST"
                LIBRARIES ${MPI_${MPI_LANGUAGE}_LIBRARIES}
                EXEC ${MPIEXEC}
                EXEC_THREADS ${MPIEXEC_NUMPROC_FLAG}
            )

            set(CINCH_RUNTIME_FLAGS ${CINCH_RUNTIME_FLAGS}
                ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
            )
            set(CINCH_RUNTIME_INCLUDES ${CINCH_RUNTIME_INCLUDES}
                ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
            )
            set(CINCH_RUNTIME_LIBRARIES ${CINCH_RUNTIME_LIBRARIES}
                ${MPI_${MPI_LANGUAGE}_LIBRARIES}
            )
        endif()

        # Legion Runtime
        if(Legion_FOUND)
            add_definitions(-DLEGION_CMAKE)
            cinch_add_test_execution_policy(LEGION
               ${CINCH_SOURCE_DIR}/auxiliary/test-legion.cc
               FLAGS ${Legion_CXX_FLAGS}
               INCLUDES ${Legion_INCLUDE_DIRS}
               LIBRARIES ${Legion_LIBRARIES} ${Legion_LIB_FLAGS})

            cinch_add_test_execution_policy(LEGION_DEVEL
               ${CMAKE_SOURCE_DIR}/cinch/auxiliary/test-legion.cc
               FLAGS ${Legion_CXX_FLAGS}
               DEFINES "-DCINCH_DEVEL_TEST"
               INCLUDES ${Legion_INCLUDE_DIRS}
               LIBRARIES ${Legion_LIBRARIES} ${Legion_LIB_FLAGS})

            set(CINCH_RUNTIME_FLAGS ${CINCH_RUNTIME_FLAGS} ${Legion_CXX_FLAGS})
            set(CINCH_RUNTIME_INCLUDES ${CINCH_RUNTIME_INCLUDES}
                ${Legion_INCLUDE_DIRS})
            set(CINCH_RUNTIME_LIBRARIES ${CINCH_RUNTIME_LIBRARIES}
                ${Legion_LIBRARIES} ${Legion_LIB_FLAGS}
            )
        endif()

        if(MPI_${MPI_LANGUAGE}_FOUND AND Legion_FOUND)
            cinch_add_test_execution_policy(MPILEGION
                ${CINCH_SOURCE_DIR}/auxiliary/test-mpilegion.cc
                FLAGS ${Legion_CXX_FLAGS}
                    ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
                INCLUDES ${Legion_INCLUDE_DIRS}
                    ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
                LIBRARIES ${Legion_LIBRARIES} ${Legion_LIB_FLAGS}
                    ${MPI_${MPI_LANGUAGE}_LIBRARIES}
                EXEC ${MPIEXEC}
                EXEC_THREADS ${MPIEXEC_NUMPROC_FLAG}) 

            cinch_add_test_execution_policy(MPILEGION_DEVEL
                ${CMAKE_SOURCE_DIR}/cinch/auxiliary/test-mpilegion.cc
                FLAGS ${Legion_CXX_FLAGS}
                    ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS}
                INCLUDES ${Legion_INCLUDE_DIRS}
                    ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH}
                DEFINES "-DCINCH_DEVEL_TEST"
                LIBRARIES ${Legion_LIBRARIES} ${Legion_LIB_FLAGS}
                    ${MPI_${MPI_LANGUAGE}_LIBRARIES}
                EXEC ${MPIEXEC}
                EXEC_THREADS ${MPIEXEC_NUMPROC_FLAG})

            set(CINCH_RUNTIME_FLAGS ${CINCH_RUNTIME_FLAGS}
                ${MPI_${MPI_LANGUAGE}_COMPILE_FLAGS} ${Legion_CXX_FLAGS}
            )
            set(CINCH_RUNTIME_INCLUDES ${CINCH_RUNTIME_INCLUDES}
                ${MPI_${MPI_LANGUAGE}_INCLUDE_PATH} ${Legion_INCLUDE_DIRS}
            )
            set(CINCH_RUNTIME_LIBRARIES ${CINCH_RUNTIME_LIBRARIES}
                ${MPI_${MPI_LANGUAGE}_LIBRARIES} 
                ${Legion_LIBRARIES} ${Legion_LIB_FLAGS}
            )

        endif()

    endif(ENABLE_UNIT_TESTS)

else()

    #--------------------------------------------------------------------------#
    # This is a submodule
    #--------------------------------------------------------------------------#

    set(CINCH_CONFIG_INFOTAG "${PROJECT_NAME}.")

endif(${CINCH_TOP_LEVEL_PROJECT})

#------------------------------------------------------------------------------#
# Add support for Doxygen documentation
#
# NOTE: This depends on CINCH_CONFIG_INFOTAG being set.
#------------------------------------------------------------------------------#

cinch_add_doxygen()

#------------------------------------------------------------------------------#
# Set output directories for targets
#------------------------------------------------------------------------------#

# Global project settings
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

#------------------------------------------------------------------------------#
# Add local include subdirectory.
#
# This is populated by calls to cinch_make_include_links below.
#------------------------------------------------------------------------------#

include_directories(${CMAKE_BINARY_DIR}/include)

#------------------------------------------------------------------------------#
# Add sub-projects
#------------------------------------------------------------------------------#

if(CINCH_SUBPROJECTS)
    foreach(subproject ${CINCH_SUBPROJECTS})

        string(REPLACE ":" ";" subproject_data ${subproject})
        list(GET subproject_data 0 subproject_name)

        add_subdirectory(${subproject_name})

    endforeach(subproject)
endif(CINCH_SUBPROJECTS)

#------------------------------------------------------------------------------#
# Library target
#------------------------------------------------------------------------------#

if(CINCH_LIBRARY_TARGETS)

    #--------------------------------------------------------------------------#
    # Process library targets
    #--------------------------------------------------------------------------#

    foreach(library_target ${CINCH_LIBRARY_TARGETS})

        string(REPLACE ":" ";" library_target_list ${library_target})

        list(GET library_target_list 0 library_target_name)
        list(GET library_target_list 1 library_target_directory)

        #----------------------------------------------------------------------#
        # Add the subdirectory
        #----------------------------------------------------------------------#

        include_directories(${library_target_directory})
        add_subdirectory(${library_target_directory})

        #----------------------------------------------------------------------#
        # Create include directory for local development
        #----------------------------------------------------------------------#

        cinch_make_include_links(${library_target_name}
            ${CMAKE_CURRENT_SOURCE_DIR}/${library_target_directory})

        #----------------------------------------------------------------------#
        # Set individual library links for parent
        #
        # This allows users to select individual libraries from a submodule
        # without including the entire submodule.
        #----------------------------------------------------------------------#

        if(NOT ${CINCH_TOP_LEVEL_PROJECT})
            set(${library_target_name}_LINKLIBS ${library_target_name}
                PARENT_SCOPE)
        endif(NOT ${CINCH_TOP_LEVEL_PROJECT})

        #----------------------------------------------------------------------#
        # Add target to global link libraries
        #
        # This adds the current library target to the global link
        # libraries.
        #----------------------------------------------------------------------#

        list(APPEND ${PROJECT_NAME}_LINKLIBS ${library_target_name})

        #----------------------------------------------------------------------#
        # Generate info target
        #----------------------------------------------------------------------#

        cinch_make_info("${CINCH_CONFIG_INFOTAG}${library_target_name}"
            "${${library_target_name}_HEADERS}"
            "${${library_target_name}_SOURCES}")

        #----------------------------------------------------------------------#
        # Create relative paths for headers
        #----------------------------------------------------------------------#

        unset(relative_headers)
        foreach(header ${${library_target_name}_HEADERS})
            string(REGEX REPLACE
                "${CMAKE_CURRENT_SOURCE_DIR}/${library_target_directory}" ""
                relative_header ${header})
            list(APPEND relative_headers ${relative_header})
        endforeach(header)

        #----------------------------------------------------------------------#
        # Add a rule to build the library
        #----------------------------------------------------------------------#

        if(NOT "${${library_target_name}_SOURCES}" STREQUAL "")
            add_library(${library_target_name}
                ${${library_target_name}_SOURCES})
            target_include_directories(${library_target_name} PRIVATE
                ${CMAKE_BINARY_DIR}/include/${library_target_name})
        endif()

        #----------------------------------------------------------------------#
        # Add install targets
        #----------------------------------------------------------------------#

        if(NOT "${${library_target_name}_SOURCES}" STREQUAL "")
             install(TARGETS ${library_target_name} DESTINATION ${LIBDIR})
        endif()

        if(${library_target_name}_PUBLIC_HEADERS)
            foreach(file ${${library_target_name}_PUBLIC_HEADERS})
                install(FILES ${library_target_directory}/${file} DESTINATION
                    include)
            endforeach(file ${${library_target_name}_PUBLIC_HEADERS})
        endif(${library_target_name}_PUBLIC_HEADERS)

        foreach(file ${relative_headers})
            get_filename_component(DIR ${file} DIRECTORY)
            install(FILES ${library_target_directory}/${file} DESTINATION
                include/${library_target_name}/${DIR})
        endforeach(file)

    endforeach(library_target)

    #--------------------------------------------------------------------------#
    # Set these for parent level build
    #--------------------------------------------------------------------------#

    if(NOT ${CINCH_TOP_LEVEL_PROJECT})
        set(${PROJECT_NAME}_LINKLIBS ${${PROJECT_NAME}_LINKLIBS} PARENT_SCOPE)
    else()
        set(CINCH_LINK_LIBRARIES ${${PROJECT_NAME}_LINKLIBS})
    endif(NOT ${CINCH_TOP_LEVEL_PROJECT})

endif(CINCH_LIBRARY_TARGETS)

#------------------------------------------------------------------------------#
# Add unit tests.
#------------------------------------------------------------------------------#

if(${CINCH_TOP_LEVEL_PROJECT})

    foreach(unit ${CINCH_UNIT_TEST_TARGETS})
        
        #----------------------------------------------------------------------#
        # Unpack information for this unit test
        #----------------------------------------------------------------------#

        string(REPLACE ":" ";" unit_target_list ${unit})

        list(GET unit_target_list 0 unit_target_name)
        list(GET unit_target_list 1 unit_target_directory)
        list(GET unit_target_list 2 unit_target_sources)
        list(GET unit_target_list 3 unit_target_defines)
        list(GET unit_target_list 4 unit_target_depends)
        list(GET unit_target_list 5 unit_target_inputs)
        list(GET unit_target_list 6 unit_target_include_dirs)
        list(GET unit_target_list 7 unit_target_libraries)
        list(GET unit_target_list 8 unit_target_compile_defs)
        list(GET unit_target_list 9 unit_target_execution_policy)
        list(GET unit_target_list 10 unit_target_execution_threads)
        list(GET unit_target_list 11 unit_project_name)

        # Convert stored values back into lists
        string(REPLACE "|" ";" unit_target_sources
            "${unit_target_sources}")
        string(REPLACE "|" ";" unit_target_defines
            "${unit_target_defines}")
        string(REPLACE "|" ";" unit_target_depends
            "${unit_target_depends}")
        string(REPLACE "|" ";" unit_target_libraries
            "${unit_target_libraries}")
        string(REPLACE "|" ";" unit_target_inputs
            "${unit_target_inputs}")
        string(REPLACE "|" ";" unit_target_include_dirs
            "${unit_target_include_dirs}")
        string(REPLACE "|" ";" unit_target_compile_defs
            "${unit_target_compile_defs}")

        # Get relative path
        get_filename_component(_RELATIVE_PATH ${unit_target_directory} NAME)

        #----------------------------------------------------------------------#
        # Don't create the unit test if its policy is not defined
        #----------------------------------------------------------------------#

        if(${unit_target_execution_policy}_TEST_POLICY_LIST)

            #------------------------------------------------------------------#
            # Create the full path to the source files
            #------------------------------------------------------------------#

            set(_UNIT_SOURCES)
            foreach(source ${unit_target_sources})
                list(APPEND _UNIT_SOURCES "${unit_target_directory}/${source}")
            endforeach(source)

            #------------------------------------------------------------------#
            # Check to see if the user has specified a runtime and
            # process it
            #------------------------------------------------------------------#

            # Get policy information
            string(REPLACE ":" ";" unit_policy_list
                "${${unit_target_execution_policy}_TEST_POLICY_LIST}")

            list(GET unit_policy_list 0 unit_policy_name)
            list(GET unit_policy_list 1 unit_policy_runtime)
            list(GET unit_policy_list 2 unit_policy_flags)
            list(GET unit_policy_list 3 unit_policy_includes)
            list(GET unit_policy_list 4 unit_policy_defines)
            list(GET unit_policy_list 5 unit_policy_libraries)
            list(GET unit_policy_list 6 unit_policy_exec)
            list(GET unit_policy_list 7 unit_policy_exec_threads)

            # Convert stored values back into lists
            string(REPLACE "|" ";" unit_policy_runtime
                "${unit_policy_runtime}")
            string(REPLACE "|" ";" unit_policy_flags
                "${unit_policy_flags}")
            string(REPLACE "|" ";" unit_policy_includes
                "${unit_policy_includes}")
            string(REPLACE "|" ";" unit_policy_defines
                "${unit_policy_defines}")
            string(REPLACE "|" ";" unit_policy_libraries
                "${unit_policy_libraries}")

            #------------------------------------------------------------------#
            # Set output directory information
            #------------------------------------------------------------------#

            if("${CMAKE_PROJECT_NAME}" STREQUAL "${unit_project_name}")
                set(_OUTPUT_DIR ${CMAKE_BINARY_DIR}/test/${_RELATIVE_PATH})
                set(_TEST_PREFIX)
            else()
                set(_OUTPUT_DIR ${CMAKE_BINARY_DIR}/test/${unit_project_name}/${_RELATIVE_PATH})
                set(_TEST_PREFIX "${unit_project_name}:")
            endif("${CMAKE_PROJECT_NAME}" STREQUAL "${unit_project_name}")

            #------------------------------------------------------------------#
            # Create target-specific main file for preprocessor header
            # dependency problem.
            #------------------------------------------------------------------#
 
            get_filename_component(_RUNTIME_MAIN ${unit_policy_runtime} NAME)
            set(_TARGET_MAIN ${unit_target_name}_${_RUNTIME_MAIN})
            configure_file(${unit_policy_runtime}
                ${_OUTPUT_DIR}/${_TARGET_MAIN} COPYONLY)

            #------------------------------------------------------------------#
            # Add user-specified defines
            #------------------------------------------------------------------#

            if (NOT "${unit_target_compile_defs}" STREQUAL "None")
                foreach(def ${unit_target_compile_defs})
                  add_definitions( -D${def} )
                endforeach()
            endif()

            #------------------------------------------------------------------#
            # Add the executable
            #------------------------------------------------------------------#

            if("${unit_target_execution_policy}" STREQUAL "FORTRAN")
                set(_FORTRAN_SOURCES)
                set(_FORTRAN_SPECIALS)

                # Run pFUnit preprocessor on .pf files
                foreach(source ${_UNIT_SOURCES})
                    get_filename_component(_EXT ${source} EXT)

                    if("${_EXT}" STREQUAL ".pf")
                        get_filename_component(_BASE ${source} NAME_WE)
                        add_custom_command(OUTPUT ${_OUTPUT_DIR}/${_BASE}.F90
                            COMMAND ${PYTHON_EXECUTABLE} ${PFUNIT_PARSER} ${source}
                            ${_OUTPUT_DIR}/${_BASE}.F90
                            DEPENDS ${source}
                            COMMENT "Generating ${_OUTPUT_DIR}/${_BASE}.F90 using pfunit")
                        list(APPEND _FORTRAN_SOURCES ${_OUTPUT_DIR}/${_BASE}.F90)
                    elseif("${_EXT}" STREQUAL ".inc")
                        get_filename_component(_OUTPUT_NAME ${source} NAME)
                        add_custom_command(OUTPUT ${_OUTPUT_DIR}/${_OUTPUT_NAME}
                            COMMAND ${CMAKE_COMMAND} -E copy ${source}
                            ${_OUTPUT_DIR}/${_OUTPUT_NAME}
                            DEPENDS ${source}
                            COMMENT "Copying ${source} for ${unit_target_name}")
                        add_custom_target(${unit_target_name}_inc_file DEPENDS
                            ${_OUTPUT_DIR}/${_OUTPUT_NAME})
                        list(APPEND _FORTRAN_SPECIALS
                            ${unit_target_name}_inc_file)
                    else()
                        list(APPEND _FORTRAN_SOURCES ${source})
                    endif()
                endforeach()

                add_executable(${unit_target_name} ${_FORTRAN_SOURCES}
                    ${unit_policy_runtime})
                target_include_directories(${unit_target_name} PRIVATE
                    ${unit_target_directory})
                target_include_directories(${unit_target_name} PRIVATE
                    ${CMAKE_BINARY_DIR})
                target_include_directories(${unit_target_name} PRIVATE
                    ${_OUTPUT_DIR})
                add_dependencies(${unit_target_name} pfunit)
                add_dependencies(${unit_target_name} ${_FORTRAN_SPECIALS})

                set(_PFUNIT_DEFINES)
                list(APPEND _PFUNIT_DEFINES ${CMAKE_Fortran_COMPILER_ID})
                list(APPEND _PFUNIT_DEFINES BUILD_ROBUST)

                set_target_properties(${unit_target_name}
                    PROPERTIES COMPILE_DEFINITIONS "${_PFUNIT_DEFINES}")
            else()
                add_executable(${unit_target_name} ${_UNIT_SOURCES}
                    ${_OUTPUT_DIR}/${_TARGET_MAIN})
            endif()

            if(NOT "${unit_policy_flags}" STREQUAL "None")
                target_compile_options(${unit_target_name}
                    PRIVATE ${unit_policy_flags})
            endif(NOT "${unit_policy_flags}" STREQUAL "None")

            #------------------------------------------------------------------#
            # Add compile definitions
            #------------------------------------------------------------------#
            
            if(NOT "${unit_target_defines}" STREQUAL "None")
                target_compile_definitions(${unit_target_name} PRIVATE
                    ${unit_target_defines})
            endif()

            if(NOT "${unit_policy_defines}" STREQUAL "None")
                target_compile_definitions(${unit_target_name} PRIVATE
                    ${unit_policy_defines})
            endif()

            #------------------------------------------------------------------#
            # Add output directory as include
            #------------------------------------------------------------------#

            target_include_directories(${unit_target_name} PRIVATE
                ${_OUTPUT_DIR} ${unit_target_directory})

            #------------------------------------------------------------------#
            # Add user-specified include directories
            #------------------------------------------------------------------#

            if (NOT "${unit_target_include_dirs}" STREQUAL "None")
                target_include_directories(${unit_target_name} PRIVATE
                    ${unit_target_include_dirs})
            endif()

            #------------------------------------------------------------------#
            # Add user-specified library dependencies
            #------------------------------------------------------------------#

            if(NOT "${unit_target_libraries}" STREQUAL "None")
                foreach(library ${unit_target_libraries})
                    target_link_libraries(${unit_target_name} ${library})
                endforeach(library)
            endif()

            #------------------------------------------------------------------#
            # Add include and link options
            #------------------------------------------------------------------#

            if(NOT "${unit_policy_includes}" STREQUAL "None")
                target_include_directories(${unit_target_name}
                    PRIVATE ${unit_policy_includes})
            endif(NOT "${unit_policy_includes}" STREQUAL "None")

            target_link_libraries(${unit_target_name} ${GTEST_LIBRARIES})

            if(ENABLE_GFLAGS)
                target_link_libraries(${unit_target_name} ${GFLAGS_LIBRARIES})
            endif()

            if(NOT "${unit_policy_libraries}" STREQUAL "None")
                target_link_libraries(${unit_target_name}
                    ${unit_policy_libraries})
            endif(NOT "${unit_policy_libraries}" STREQUAL "None")

            #------------------------------------------------------------------#
            # Change the output directory to the test subdirectory
            #------------------------------------------------------------------#

            set_target_properties(${unit_target_name}
                PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${_OUTPUT_DIR})

            #------------------------------------------------------------------#
            # Add user-specified dependencies
            #------------------------------------------------------------------#

            if(NOT "${unit_target_depends}" STREQUAL "None")
                foreach(depend ${unit_target_depends})
                    set_property(SOURCE ${_OUTPUT_DIR}/${_TARGET_MAIN}
                        APPEND PROPERTY OBJECT_DEPENDS
                        ${CMAKE_SOURCE_DIR}/${depend})
                endforeach(depend)
            endif()

            #------------------------------------------------------------------#
            # Copy dependency file to test directory
            #------------------------------------------------------------------#

            if(NOT "${unit_target_inputs}" STREQUAL "None")
                set(_OUTPUT_FILES)
                foreach(input ${unit_target_inputs})
                    get_filename_component(_OUTPUT_NAME ${input} NAME)
                    add_custom_command(OUTPUT ${_OUTPUT_DIR}/${_OUTPUT_NAME}
                        COMMAND ${CMAKE_COMMAND} -E copy 
                        ${unit_target_directory}/${input}
                        ${_OUTPUT_DIR}/${_OUTPUT_NAME}
                        DEPENDS ${unit_target_directory}/${input}
                        COMMENT "Copying ${input} for ${unit_target_name}")
                    list(APPEND _OUTPUT_FILES ${_OUTPUT_DIR}/${_OUTPUT_NAME})
                endforeach()
                add_custom_target(${unit_target_name}_inputs
                    DEPENDS ${_OUTPUT_FILES})
                add_dependencies(${unit_target_name} ${unit_target_name}_inputs)
            endif()

            #------------------------------------------------------------------#
            # Add the test target to CTest
            #------------------------------------------------------------------#

            string(REPLACE "|" ";" thread_instance_list
                ${unit_target_execution_threads})

            list(LENGTH thread_instance_list thread_instances)

            string(REGEX MATCH "DEVEL" _IS_DEVEL
                ${unit_target_execution_policy})

            set(_IS_GTEST)
            if(NOT "${unit_target_execution_policy}" STREQUAL "FORTRAN"
                AND NOT _IS_DEVEL)
                set(_IS_GTEST TRUE)
            endif()

            if(_IS_GTEST)
                set(UNIT_FLAGS --gtest_color=no)
                if(ENABLE_COLOR_UNIT_TESTS)
                    set(UNIT_FLAGS --gtest_color=yes)
                endif(ENABLE_COLOR_UNIT_TESTS)
            else()
                set(UNIT_FLAGS)
            endif()

            if(${thread_instances} GREATER 1)

                foreach(instance ${thread_instance_list})
                    if(ENABLE_JENKINS_OUTPUT AND _IS_GTEST)
                        set(_OUTPUT
                            ${_OUTPUT_DIR}/${unit_target_name}_${instance}.xml)
                        set(UNIT_FLAGS ${UNIT_FLAGS}
                            --gtest_output=xml:${_OUTPUT})
                    endif()

                    add_test(
                        NAME
                            "${_TEST_PREFIX}${unit_target_name}_${instance}"
                        COMMAND
                            ${unit_policy_exec}
                            ${unit_policy_exec_threads} ${instance}
                            ${_OUTPUT_DIR}/${unit_target_name}
                            ${UNIT_FLAGS}
                        WORKING_DIRECTORY ${_OUTPUT_DIR})
                endforeach(instance)

            else()

                if(ENABLE_JENKINS_OUTPUT AND _IS_GTEST)
                    set(_OUTPUT
                        ${_OUTPUT_DIR}/${unit_target_name}.xml)
                    set(UNIT_FLAGS ${UNIT_FLAGS}
                        --gtest_output=xml:${_OUTPUT})
                endif()

                if(NOT "${unit_policy_exec}" STREQUAL "None")
                    add_test(
                        NAME
                            "${_TEST_PREFIX}${unit_target_name}"
                        COMMAND
                            ${unit_policy_exec}
                            ${unit_policy_exec_threads}
                            ${unit_target_execution_threads}
                            ${_OUTPUT_DIR}/${unit_target_name}
                            ${UNIT_FLAGS}
                        WORKING_DIRECTORY ${_OUTPUT_DIR})
                else()
                    add_test(
                        NAME
                            "${_TEST_PREFIX}${unit_target_name}"
                        COMMAND
                            ${_OUTPUT_DIR}/${unit_target_name}
                            ${UNIT_FLAGS}
                        WORKING_DIRECTORY ${_OUTPUT_DIR})
                endif(NOT "${unit_policy_exec}" STREQUAL "None")

            endif(${thread_instances} GREATER 1)

        endif(${unit_target_execution_policy}_TEST_POLICY_LIST)

    endforeach(unit)

    #--------------------------------------------------------------------------#
    # Install cinch logging utility
    #--------------------------------------------------------------------------#

    install(FILES ${CMAKE_SOURCE_DIR}/cinch/logging/cinchlog.h
        DESTINATION include)

endif(${CINCH_TOP_LEVEL_PROJECT})

#------------------------------------------------------------------------------#
# Application directories
#------------------------------------------------------------------------------#

if(CINCH_APPLICATION_DIRECTORIES)
    foreach(application_directory ${CINCH_APPLICATION_DIRECTORIES})

        add_subdirectory(${application_directory})

    endforeach(application_directory)

endif(CINCH_APPLICATION_DIRECTORIES)

#------------------------------------------------------------------------------#
# Formatting options for emacs and vim.
# vim: set tabstop=4 shiftwidth=4 filetype=cmake expandtab :
#------------------------------------------------------------------------------#
